import asyncio
import argparse
import sys
from rich.console import Console
from rich.table import Table
from rich.live import Live
from rich import box


class ImageStatus:
    def __init__(self, image):
        self.image = image
        self.status = "pending"
        self.error = None


def log_error(image, message):
    with open("error.log", "a") as f:
        f.write(f"[{image}] {message}\n")


async def run_command(command):
    process = await asyncio.create_subprocess_exec(
        *command,
        stdout=asyncio.subprocess.DEVNULL,
        stderr=asyncio.subprocess.PIPE,
    )
    _, stderr = await process.communicate()
    if process.returncode != 0:
        return False, stderr.decode().strip()
    return True, None


async def run_command_with_retry(command, retries=2, delay=2):
    for attempt in range(retries + 1):
        success, error = await run_command(command)
        if success:
            return True, None
        if attempt < retries:
            await asyncio.sleep(delay)
    return False, error


async def pull_and_optionally_push(image_status, semaphore, push=False, target_registry=None, retries=2):
    async with semaphore:
        img = image_status.image
        image_status.status = "pulling"
        success, error = await run_command_with_retry(["docker", "pull", img], retries=retries)
        if not success:
            image_status.status = "error"
            image_status.error = f"pull failed: {error}"
            log_error(img, image_status.error)
            return

        if push:
            image_status.status = "tagging"
            image_name = img.split("/")[-1]
            target_image = f"{target_registry}/{image_name}"

            tagged, error = await run_command_with_retry(["docker", "tag", img, target_image], retries=retries)
            if not tagged:
                image_status.status = "error"
                image_status.error = f"tag failed: {error}"
                log_error(img, image_status.error)
                return

            image_status.status = "pushing"
            pushed, error = await run_command_with_retry(["docker", "push", target_image], retries=retries)
            if not pushed:
                image_status.status = "error"
                image_status.error = f"push failed: {error}"
                log_error(img, image_status.error)
                return

        image_status.status = "done"


def build_status_table(image_status_list):
    table = Table(title="📦 Docker Image Sync Progress", box=box.SIMPLE_HEAVY)
    table.add_column("Image", style="cyan", no_wrap=True)
    table.add_column("Status", style="magenta")
    table.add_column("Error", style="red")

    for status in image_status_list:
        status_icon = {
            "pending": "[yellow]⏳ Waiting",
            "pulling": "[cyan]⬇️ Pulling",
            "tagging": "[blue]🏷 Tagging",
            "pushing": "[cyan]⬆️ Pushing",
            "done": "[green]✅ Done",
            "error": "[red]❌ Error",
        }.get(status.status, status.status)

        error_msg = status.error or "-"
        table.add_row(status.image, status_icon, error_msg)

    return table


async def main():
    parser = argparse.ArgumentParser(description="Async Docker image pull/push tool with rich UI")
    parser.add_argument("--image-list", required=True, help="File with image names (one per line)")
    parser.add_argument("--push", action="store_true", help="Push images to target registry")
    parser.add_argument("--target-registry", help="Target registry for pushing images")
    parser.add_argument("--max-concurrent", type=int, default=4, help="Max number of concurrent operations (default: 4)")
    parser.add_argument("--retry", type=int, default=2, help="Number of retries on failure (default: 2)")
    args = parser.parse_args()

    if args.push and not args.target_registry:
        parser.error("--target-registry is required when using --push")

    with open(args.image_list, "r") as f:
        images = [line.strip() for line in f if line.strip()]

    # Clear previous error log
    open("error.log", "w").close()

    image_status_list = [ImageStatus(image) for image in images]
    semaphore = asyncio.Semaphore(args.max_concurrent)
    console = Console()

    async def runner():
        tasks = [
            pull_and_optionally_push(status, semaphore, args.push, args.target_registry, retries=args.retry)
            for status in image_status_list
        ]
        await asyncio.gather(*tasks)

    with Live(build_status_table(image_status_list), refresh_per_second=4, console=console) as live:
        task = asyncio.create_task(runner())
        while not task.done():
            live.update(build_status_table(image_status_list))
            await asyncio.sleep(0.5)
        live.update(build_status_table(image_status_list))

    console.print("\n✅ [green bold]All done![/green bold]")
    if any(s.status == "error" for s in image_status_list):
        console.print("[red]Some images failed. See [bold]error.log[/bold] for details.[/red]")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n⛔️ Interrupted by user.")
        sys.exit(1)